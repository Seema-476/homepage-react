{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\react_folder\\\\homepage-react\\\\src\\\\common\\\\Gsap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport gsap from 'gsap';\nimport { useGSAP } from '@gsap/react';\nimport TextAnimation from './TextAnimation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ngsap.registerPlugin(useGSAP);\nconst Gsap = () => {\n  _s();\n  const {\n    contextSafe\n  } = useGSAP();\n  const sectionRef = useRef(null);\n  const textRef = useRef(null);\n  const spin = contextSafe(({\n    currentTarget\n  }) => {\n    gsap.to(currentTarget, {\n      rotation: \"+=90\",\n      repeat: 1,\n      x: 100,\n      duration: 1,\n      ease: 'elastic.out'\n    });\n    gsap.to(currentTarget, {\n      rotation: \"+=360\",\n      x: 100,\n      duration: 1\n    });\n    gsap.to(currentTarget, {\n      rotation: \"+=360\",\n      x: 100,\n      duration: 1\n    });\n    gsap.from(currentTarget, {\n      rotation: \"-=360\"\n    });\n  });\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          // Start the animation when the section comes into view\n          gsap.to(sectionRef.current, {\n            opacity: 1,\n            duration: 1\n          });\n          // Optionally, you can trigger other animations here as well\n        }\n      });\n    }, {\n      threshold: 0\n    }); // Trigger when 50% of the section is visible\n\n    if (textRef.current) {\n      observer.observe(textRef.current);\n    }\n\n    // Clean up observer on component unmount\n    return () => {\n      if (sectionRef.current) {\n        observer.unobserve(sectionRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"py-12 overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-inter font-semibold text-4xl text-black text-center pb-9 cursor-pointer\",\n        children: \"Gsap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box bg-black max-w-[100px] h-20 flex justify-center items-center rounded mx-auto text-white\",\n        ref: sectionRef,\n        onClick: spin,\n        children: \"Click me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextAnimation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(Gsap, \"gRcph6bKWXjCuFAf2rxzgyvbuJI=\", false, function () {\n  return [useGSAP];\n});\n_c = Gsap;\nexport default Gsap;\nvar _c;\n$RefreshReg$(_c, \"Gsap\");","map":{"version":3,"names":["React","useRef","useEffect","gsap","useGSAP","TextAnimation","jsxDEV","_jsxDEV","registerPlugin","Gsap","_s","contextSafe","sectionRef","textRef","spin","currentTarget","to","rotation","repeat","x","duration","ease","from","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","current","opacity","threshold","observe","unobserve","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/react_folder/homepage-react/src/common/Gsap.jsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\r\nimport gsap from 'gsap'\r\nimport { useGSAP } from '@gsap/react';\r\nimport TextAnimation from './TextAnimation';\r\ngsap.registerPlugin(useGSAP);\r\n\r\nconst Gsap = () => {\r\n    const { contextSafe } = useGSAP();\r\n    const sectionRef = useRef(null);\r\n    const textRef = useRef(null);\r\n    const spin = contextSafe(({ currentTarget }) => {\r\n        gsap.to(currentTarget, { rotation: \"+=90\", repeat: 1, x: 100, duration: 1, ease: 'elastic.out' });\r\n        gsap.to(currentTarget, { rotation: \"+=360\", x: 100, duration: 1 });\r\n        gsap.to(currentTarget, { rotation: \"+=360\", x: 100, duration: 1 });\r\n        gsap.from(currentTarget, { rotation: \"-=360\", });\r\n    });\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver((entries) => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    // Start the animation when the section comes into view\r\n                    gsap.to(sectionRef.current, { opacity: 1, duration: 1 });\r\n                    // Optionally, you can trigger other animations here as well\r\n                }\r\n            });\r\n        }, { threshold: 0 }); // Trigger when 50% of the section is visible\r\n\r\n        if (textRef.current) {\r\n            observer.observe(textRef.current);\r\n        }\r\n\r\n        // Clean up observer on component unmount\r\n        return () => {\r\n            if (sectionRef.current) {\r\n                observer.unobserve(sectionRef.current);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className='py-12 overflow-hidden'>\r\n            <div className='container'>\r\n                <h3 className='font-inter font-semibold text-4xl text-black text-center pb-9 cursor-pointer'>Gsap</h3>\r\n                <div className=\"box bg-black max-w-[100px] h-20 flex justify-center items-center rounded mx-auto text-white\" ref={sectionRef} onClick={spin}>Click me\r\n                </div>\r\n            </div>\r\n            <TextAnimation/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gsap\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}