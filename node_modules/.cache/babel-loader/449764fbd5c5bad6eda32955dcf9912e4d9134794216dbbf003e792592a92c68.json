{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\react_folder\\\\homepage-react\\\\src\\\\common\\\\TextAnimation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport gsap from \"gsap\";\nimport { SplitText } from \"@splittext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextAnimation = () => {\n  _s();\n  const quoteRef = useRef(null);\n  const animateButtonRef = useRef(null);\n  useEffect(() => {\n    // Register SplitText plugin\n    gsap.registerPlugin(SplitText);\n\n    // Split text into words and characters\n    const mySplitText = new SplitText(quoteRef.current, {\n      type: \"words,chars\"\n    });\n    const chars = mySplitText.chars; // This is an array of divs that wrap each character\n\n    // Set the perspective for the #quote element\n    gsap.set(quoteRef.current, {\n      perspective: 400\n    });\n\n    // Create the animation timeline\n    const tl = gsap.timeline();\n    tl.from(chars, {\n      duration: 0.8,\n      opacity: 0,\n      scale: 0,\n      y: 80,\n      rotationX: 180,\n      transformOrigin: \"0% 50% -50\",\n      ease: \"back\",\n      stagger: 0.01\n    });\n    // Button click to restart the animation\n    const animateButton = animateButtonRef.current;\n    animateButton.onclick = () => {\n      tl.restart();\n    };\n    return () => {\n      // Clean up when component unmounts\n      mySplitText.revert(); // Revert SplitText when the component is removed\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"font\",\n    children: \"Lorem ipsum dolor, sit amet consectetur adipisicing elit. Aspernatur, architecto nihil esse vero adipisci possimus itaque modi cum omnis at!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(TextAnimation, \"dR4cvNny6LPaXdnXbNGEv59NGb4=\");\n_c = TextAnimation;\nexport default TextAnimation;\nvar _c;\n$RefreshReg$(_c, \"TextAnimation\");","map":{"version":3,"names":["React","useEffect","useRef","gsap","SplitText","jsxDEV","_jsxDEV","TextAnimation","_s","quoteRef","animateButtonRef","registerPlugin","mySplitText","current","type","chars","set","perspective","tl","timeline","from","duration","opacity","scale","y","rotationX","transformOrigin","ease","stagger","animateButton","onclick","restart","revert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/react_folder/homepage-react/src/common/TextAnimation.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport gsap from \"gsap\";\r\nimport { SplitText } from \"@splittext\";\r\n\r\nconst TextAnimation = () => {\r\n    const quoteRef = useRef(null);\r\n    const animateButtonRef = useRef(null);\r\n    useEffect(() => {\r\n        // Register SplitText plugin\r\n        gsap.registerPlugin(SplitText);\r\n\r\n        // Split text into words and characters\r\n        const mySplitText = new SplitText(quoteRef.current, { type: \"words,chars\" });\r\n        const chars = mySplitText.chars; // This is an array of divs that wrap each character\r\n\r\n        // Set the perspective for the #quote element\r\n        gsap.set(quoteRef.current, { perspective: 400 });\r\n\r\n        // Create the animation timeline\r\n        const tl = gsap.timeline();\r\n        tl.from(chars, {\r\n            duration: 0.8,\r\n            opacity: 0,\r\n            scale: 0,\r\n            y: 80,\r\n            rotationX: 180,\r\n            transformOrigin: \"0% 50% -50\",\r\n            ease: \"back\",\r\n            stagger: 0.01\r\n        });\r\n        // Button click to restart the animation\r\n        const animateButton = animateButtonRef.current;\r\n        animateButton.onclick = () => {\r\n            tl.restart();\r\n        };\r\n        return () => {\r\n            // Clean up when component unmounts\r\n            mySplitText.revert(); // Revert SplitText when the component is removed\r\n        };\r\n    }, []);\r\n  return (\r\n    <div className='font'>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Aspernatur, architecto nihil esse vero adipisci possimus itaque modi cum omnis at!</div>\r\n  )\r\n}\r\n\r\nexport default TextAnimation"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,SAAS,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMQ,gBAAgB,GAAGR,MAAM,CAAC,IAAI,CAAC;EACrCD,SAAS,CAAC,MAAM;IACZ;IACAE,IAAI,CAACQ,cAAc,CAACP,SAAS,CAAC;;IAE9B;IACA,MAAMQ,WAAW,GAAG,IAAIR,SAAS,CAACK,QAAQ,CAACI,OAAO,EAAE;MAAEC,IAAI,EAAE;IAAc,CAAC,CAAC;IAC5E,MAAMC,KAAK,GAAGH,WAAW,CAACG,KAAK,CAAC,CAAC;;IAEjC;IACAZ,IAAI,CAACa,GAAG,CAACP,QAAQ,CAACI,OAAO,EAAE;MAAEI,WAAW,EAAE;IAAI,CAAC,CAAC;;IAEhD;IACA,MAAMC,EAAE,GAAGf,IAAI,CAACgB,QAAQ,CAAC,CAAC;IAC1BD,EAAE,CAACE,IAAI,CAACL,KAAK,EAAE;MACXM,QAAQ,EAAE,GAAG;MACbC,OAAO,EAAE,CAAC;MACVC,KAAK,EAAE,CAAC;MACRC,CAAC,EAAE,EAAE;MACLC,SAAS,EAAE,GAAG;MACdC,eAAe,EAAE,YAAY;MAC7BC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE;IACb,CAAC,CAAC;IACF;IACA,MAAMC,aAAa,GAAGnB,gBAAgB,CAACG,OAAO;IAC9CgB,aAAa,CAACC,OAAO,GAAG,MAAM;MAC1BZ,EAAE,CAACa,OAAO,CAAC,CAAC;IAChB,CAAC;IACD,OAAO,MAAM;MACT;MACAnB,WAAW,CAACoB,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EACR,oBACE1B,OAAA;IAAK2B,SAAS,EAAC,MAAM;IAAAC,QAAA,EAAC;EAA4I;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAE5K,CAAC;AAAA9B,EAAA,CAvCKD,aAAa;AAAAgC,EAAA,GAAbhC,aAAa;AAyCnB,eAAeA,aAAa;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}